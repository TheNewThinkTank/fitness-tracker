name: Qualify Code

on:
  workflow_call:
    inputs:
      google_drive_data_path:
        required: true
        type: string

jobs:
  qualify_code:
    runs-on: ubuntu-20.04

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
          cache: pip

      - name: Install and cache poetry
        run: make -f .config/Makefile install-poetry
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Cache poetry dependencies
        id: cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}-v2
          restore-keys: ${{ runner.os }}-poetry-

      - name: Install dependencies with poetry
        run: poetry install
        env:
          POETRY_VIRTUALENVS_IN_PROJECT: true
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Set GOOGLE_DRIVE_DATA_PATH
        run: echo "GOOGLE_DRIVE_DATA_PATH=${{ inputs.google_drive_data_path }}" >> $GITHUB_ENV

      - name: Print GOOGLE_DRIVE_DATA_PATH
        run: echo $GOOGLE_DRIVE_DATA_PATH        

      - name: Cache mypy dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/mypy
          key: ${{ runner.os }}-mypy-${{ hashFiles('**/mypy.ini') }}
          restore-keys: ${{ runner.os }}-mypy-

      - name: Check poetry version
        run: poetry --version

      # - name: Format with Ruff
      #   run: poetry ruff format .

      # - name: Lint with ruff
      #   run: make -f .config/Makefile lint-ruff

      - name: Static type checks with mypy
        run: make -f .config/Makefile static-type-checks

      - name: wily build and rank
        run: make -f .config/Makefile wily-build-and-rank

      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@master
        with:
          ignore_paths: >-
            site-packages
          ignore_names: site-packages

      - name: yamllint workout_programs
        uses: ibiqlik/action-yamllint@v3
        with:
          file_or_dir: "./docs/project_docs/Workout-Programs/workout_programs.yml"

      # - name: Set PYTHONPATH
      #   run: |
      #     echo "PYTHONPATH=\$PYTHONPATH:$(pwd):$(pwd)/src:$(pwd)/src/crud:$(pwd)/test"
      #     echo "PYTHONPATH=$PYTHONPATH:$(pwd):$(pwd)/src:$(pwd)/src/crud:$(pwd)/test"
      #     echo "PYTHONPATH=\$PYTHONPATH:$(pwd):$(pwd)/src:$(pwd)/src/crud:$(pwd)/test" >> $GITHUB_ENV

      - name: Print PYTHONPATH
        run: echo $PYTHONPATH

      # - name: Run pytest
      #   run: poetry run pytest --durations=10 test/test_model.py

      # - name: BDD with Behave
      #   run: poetry run behave

      - name: Set up workspace
        run: |
          mkdir -p data

      - name: Run tests
        run: |
          poetry run pytest --rootdir=$(pwd) test/ --cov --cov-report=xml
        env:
          EMAIL: ${{ secrets.EMAIL }}
          USER: ${{ secrets.USER }}
          ATHLETE: ${{ secrets.ATHLETE }}
          # PYTHONPATH: ${{ env.PYTHONPATH }}

      - name: Upload results to Codecov
        # uses: codecov/codecov-action@v4
        uses: codecov/codecov-action@5c47607acb93fed5485fdbf7232e8a31425f672a  # v5.0.2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: TheNewThinkTank/fitness-tracker
          # codecov_yml_path: .config/codecov.yml  # --codecov-yml-path
          verbose: true # optional (default = false)

      - uses: rojopolis/spellcheck-github-actions@0.40.0
        name: Spellcheck
        with:
          config_path: .config/.spellcheck.yml
          source_files: README.md # workout_programs.md
          task_name: Markdown

      # - name: Pydantic data validation
      #   run: poetry run python src/utils/validate.py
