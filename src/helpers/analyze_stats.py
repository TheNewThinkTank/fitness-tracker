"""
read stats file generated by cProfile,
convert to dataframe and visualize
"""

import pstats
# import string

# import pandas as pd  # type: ignore


def stats_to_txt(infile: str, outfile: str) -> None:
    """_summary_

    :param infile: _description_
    :type infile: str
    :param outfile: _description_
    :type outfile: str
    """

    with open(outfile, "w") as stream:
        stats = pstats.Stats(infile, stream=stream)
        stats.strip_dirs().sort_stats("cumtime").print_stats()


def txt_to_df(infile: str):  # -> pd.DataFrame:
    """_summary_

    :param infile: _description_
    :type infile: str
    """

    with open(infile, "r") as rf:
        lines = rf.readlines()
        lines = [line.removesuffix("\n") for line in lines]

    header = lines[6].split()

    data = lines[7:]

    print(header, data[0])

    # data = [d.split() for d in data]

    # data = [d for d in data if len(d) == len(header)]
    # data = [
    #     d
    #     for d in data
    #     if not any(d[-1].startswith(char) for char in string.punctuation)
    # ]

    # return pd.DataFrame(data=data, columns=header)
    return


def main():
    """_summary_
    """
    infile = "stats/get_workout_duration.stats"
    outfile = "stats/get_workout_duration_report.txt"

    stats_to_txt(infile, outfile)
    # df = txt_to_df(infile=outfile)
    # print(df.head(30))


if __name__ == "__main__":
    main()


# Get 2 longest running calls
# stats.sort_stats("cumtime").print_stats(2)

# get callees of function defined on line 19
# to dig into why a function is taking a long time
# stats.print_callees("get_workout_duration.py:19")

# if a function is taking a long time
# use print_callers to see what is calling it
# stats.print_callers("get_workout_duration.py:13")

# generate profile for snakeviz
# python3 -m cProfile -o stats/get_workout_duration.prof src/helpers/get_workout_duration.py

# start SnakeViz from the command line
# snakeviz "stats/get_workout_duration.prof"
